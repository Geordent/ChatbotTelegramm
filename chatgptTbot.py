import logging
import openai
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π
TELEGRAM_BOT_TOKEN = "7687315559:AAFDp1K9p81sTnmgohUmoK6fn8oYMtBerqo"
OPENAI_API_KEY = "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"

openai.api_key = OPENAI_API_KEY

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(bot)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üí¨ –ß–∞—Ç —Å ChatGPT"))
    keyboard.add(KeyboardButton("üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å"), KeyboardButton("üîÑ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø G_p_t_Chat –±–æ—Ç.\n\n"
        "–Ø –º–æ–≥—É:\n"
        "1Ô∏è‚É£ –û–±—â–∞—Ç—å—Å—è —Å ChatGPT.\n"
        "2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ (—Å–∫–æ—Ä–æ).\n"
        "3Ô∏è‚É£ –ü–æ–ø–æ–ª–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å –∏ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (—Å–∫–æ—Ä–æ).\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=main_menu(),
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ß–∞—Ç —Å ChatGPT"
@dp.message_handler(lambda message: message.text == "üí¨ –ß–∞—Ç —Å ChatGPT")
async def chat_with_gpt(message: types.Message):
    await message.answer("üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ ChatGPT!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å ChatGPT
@dp.message_handler()
async def gpt_chat(message: types.Message):
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI API
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",  # –ò–ª–∏ "gpt-4"
            messages=[
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": message.text}
            ]
        )
        gpt_response = response["choices"][0]["message"]["content"]
        await message.answer(gpt_response)
    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ChatGPT. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.error(f"–û—à–∏–±–∫–∞ ChatGPT: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å"
@dp.message_handler(lambda message: message.text == "üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def check_balance(message: types.Message):
    await message.answer("‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"
@dp.message_handler(lambda message: message.text == "üîÑ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def refill_balance(message: types.Message):
    await message.answer("‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
