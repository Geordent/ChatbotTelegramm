import logging
import os
import requests
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
dotenv_path = "./.env"
load_dotenv(dotenv_path)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}
MAX_HISTORY_LENGTH = 60
selected_model = "gpt-3.5-turbo"  # –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = [
        [KeyboardButton("üí¨ –ß–∞—Ç —Å ChatGPT"), KeyboardButton("‚öôÔ∏è –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å")],
        [KeyboardButton("üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å"), KeyboardButton("üîÑ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")],
        [KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context):
    user_id = update.message.from_user.id
    user_sessions[user_id] = [{"role": "system", "content": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫."}]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø G_p_t_Chat –±–æ—Ç.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=main_menu(),
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset
async def reset_history(update: Update, context):
    user_id = update.message.from_user.id
    if user_id in user_sessions:
        user_sessions.pop(user_id)
    await update.message.reply_text("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å"
async def check_balance(update: Update, context):
    balance_url = "https://platform.openai.com/account/usage"
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –±–∞–ª–∞–Ω—Å—É OpenAI", url=balance_url)]])
    await update.message.reply_text(
        "üí∞ –ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"
async def refill_balance(update: Update, context):
    refill_url = "https://platform.openai.com/account/billing"
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é –±–∞–ª–∞–Ω—Å–∞", url=refill_url)]])
    await update.message.reply_text(
        "üí≥ –ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
async def pay_subscription(update: Update, context):
    subscription_url = "https://chat.openai.com/#pricing"
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏", url=subscription_url)]])
    await update.message.reply_text(
        "üîî –ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ ChatGPT, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å"
async def choose_model(update: Update, context):
    model_menu = InlineKeyboardMarkup([
        [InlineKeyboardButton("GPT-3.5", callback_data="select_gpt-3.5-turbo")],
        [InlineKeyboardButton("GPT-4", callback_data="select_gpt-4")]
    ])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è:", reply_markup=model_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
async def select_model(update: Update, context):
    global selected_model
    selected_model = update.callback_query.data.split("_")[1]
    await update.callback_query.message.reply_text(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å: {selected_model}")
    await update.callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ß–∞—Ç —Å ChatGPT"
async def chat_with_gpt(update: Update, context):
    await update.message.reply_text(f"üí¨ –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: {selected_model}. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –≤ ChatGPT!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è ChatGPT
async def gpt_chat(update: Update, context):
    user_id = update.message.from_user.id
    if user_id not in user_sessions:
        user_sessions[user_id] = [{"role": "system", "content": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫."}]

    user_sessions[user_id].append({"role": "user", "content": update.message.text})

    if len(user_sessions[user_id]) > MAX_HISTORY_LENGTH:
        user_sessions[user_id] = user_sessions[user_id][-MAX_HISTORY_LENGTH:]

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {OPENAI_API_KEY}"
    }

    payload = {
        "model": selected_model,
        "messages": user_sessions[user_id]
    }

    try:
        response = requests.post(
            "https://api.openai.com/v1/chat/completions",
            headers=headers,
            json=payload
        )

        if response.status_code == 200:
            gpt_response = response.json()["choices"][0]["message"]["content"]
            user_sessions[user_id].append({"role": "assistant", "content": gpt_response})
            await update.message.reply_text(gpt_response)
        else:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logging.error(f"–û—à–∏–±–∫–∞ OpenAI API: {response.status_code} - {response.text}")

    except requests.exceptions.RequestException as e:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å API.")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def main():
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("reset", reset_history))
    application.add_handler(MessageHandler(filters.Regex("üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å"), check_balance))
    application.add_handler(MessageHandler(filters.Regex("üîÑ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"), refill_balance))
    application.add_handler(MessageHandler(filters.Regex("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"), pay_subscription))
    application.add_handler(MessageHandler(filters.Regex("‚öôÔ∏è –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å"), choose_model))
    application.add_handler(MessageHandler(filters.Regex("üí¨ –ß–∞—Ç —Å ChatGPT"), chat_with_gpt))
    application.add_handler(CallbackQueryHandler(select_model, pattern="select_"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, gpt_chat))

    application.run_polling(poll_interval=5)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª 5 —Å–µ–∫—É–Ω–¥

if __name__ == "__main__":
    main()
